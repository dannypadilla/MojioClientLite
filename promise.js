// Generated by CoffeeScript 1.9.1

/*
 *  Copyright 2012-2013 (c) Pierre Duquesne <stackp@online.fr>
 *  Licensed under the New BSD License.
 *  https://github.com/stackp/promisejs
 */

(function() {
  (function(exports) {
    var Promise, _ajaxer, _encode, ajax, chain, join, new_xhr, promise;
    Promise = function() {
      this._callbacks = [];
    };
    join = function(promises) {
      var i, notifier, numdone, p, results, total;
      p = new Promise;
      results = [];
      notifier = function(i) {
        return function() {
          numdone += 1;
          results[i] = Array.prototype.slice.call(arguments);
          if (numdone === total) {
            p.done(results);
          }
        };
      };
      if (!promises || !promises.length) {
        p.done(results);
        return p;
      }
      numdone = 0;
      total = promises.length;
      i = 0;
      while (i < total) {
        promises[i].then(notifier(i));
        i++;
      }
      return p;
    };
    chain = function(funcs, args) {
      var p;
      p = new Promise;
      if (funcs.length === 0) {
        p.done.apply(p, args);
      } else {
        funcs[0].apply(null, args).then(function() {
          funcs.splice(0, 1);
          chain(funcs, arguments).then(function() {
            p.done.apply(p, arguments);
          });
        });
      }
      return p;
    };

    /*
     * AJAX requests
     */
    _encode = function(data) {
      var e, k, params, payload;
      payload = '';
      if (typeof data === 'string') {
        payload = data;
      } else {
        e = encodeURIComponent;
        params = [];
        for (k in data) {
          if (data.hasOwnProperty(k)) {
            params.push(e(k) + '=' + e(data[k]));
          }
        }
        payload = params.join('&');
      }
      return payload;
    };
    new_xhr = function() {
      var e, xhr;
      xhr = void 0;
      if (window.XMLHttpRequest) {
        xhr = new XMLHttpRequest;
      } else if (window.ActiveXObject) {
        try {
          xhr = new ActiveXObject('Msxml2.XMLHTTP');
        } catch (_error) {
          e = _error;
          xhr = new ActiveXObject('Microsoft.XMLHTTP');
        }
      }
      return xhr;
    };
    ajax = function(method, url, data, headers) {
      var content_type, e, h, onTimeout, p, payload, tid, timeout, xhr;
      p = new Promise;
      xhr = void 0;
      payload = void 0;
      onTimeout = function() {
        xhr.abort();
        p.done(promise.ETIMEOUT, '', xhr);
      };
      data = data || {};
      headers = headers || {};
      try {
        xhr = new_xhr();
      } catch (_error) {
        e = _error;
        p.done(promise.ENOXHR, '');
        return p;
      }
      payload = _encode(data);
      if (method === 'GET' && payload) {
        url += '?' + payload;
        payload = null;
      }
      xhr.open(method, url);
      content_type = 'application/x-www-form-urlencoded';
      for (h in headers) {
        if (headers.hasOwnProperty(h)) {
          if (h.toLowerCase() === 'content-type') {
            content_type = headers[h];
          } else {
            xhr.setRequestHeader(h, headers[h]);
          }
        }
      }
      xhr.setRequestHeader('Content-type', content_type);
      if (content_type === 'application/json') {
        payload = JSON.stringify(data);
      } else if (content_type === 'multipart/form-data') {
        payload = data;
      }
      timeout = promise.ajaxTimeout;
      if (timeout) {
        tid = setTimeout(onTimeout, timeout);
      }
      xhr.onreadystatechange = function() {
        var err;
        if (timeout) {
          clearTimeout(tid);
        }
        if (xhr.readyState === 4) {
          err = !xhr.status || (xhr.status < 200 || xhr.status >= 300) && xhr.status !== 304;
          p.done(err, xhr.responseText, xhr);
        }
      };
      xhr.send(payload);
      return p;
    };
    _ajaxer = function(method) {
      return function(url, data, headers) {
        return ajax(method, url, data, headers);
      };
    };
    Promise.prototype.then = function(func, context) {
      var p;
      p = void 0;
      if (this._isdone) {
        p = func.apply(context, this.result);
      } else {
        p = new Promise;
        this._callbacks.push(function() {
          var res;
          res = func.apply(context, arguments);
          if (res && typeof res.then === 'function') {
            res.then(p.done, p);
          }
        });
      }
      return p;
    };
    Promise.prototype.done = function() {
      var i;
      this.result = arguments;
      this._isdone = true;
      i = 0;
      while (i < this._callbacks.length) {
        this._callbacks[i].apply(null, arguments);
        i++;
      }
      this._callbacks = [];
    };
    promise = {
      Promise: Promise,
      join: join,
      chain: chain,
      ajax: ajax,
      get: _ajaxer('GET'),
      post: _ajaxer('POST'),
      put: _ajaxer('PUT'),
      del: _ajaxer('DELETE'),
      ENOXHR: 1,
      ETIMEOUT: 2,
      ajaxTimeout: 0
    };
    if (typeof define === 'function' && define.amd) {

      /* AMD support */
      define(function() {
        return promise;
      });
    } else {
      exports.promise = promise;
    }
  })(this);

}).call(this);

//# sourceMappingURL=promise.js.map
