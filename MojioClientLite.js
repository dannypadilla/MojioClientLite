// Generated by CoffeeScript 1.9.1
(function() {
  var $http,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  $http = function(url) {
    var _encode, core;
    _encode = function(data) {
      var k, params, payload;
      payload = '';
      if (typeof data === 'string') {
        payload = data;
      } else {
        params = [];
        for (k in data) {
          if (data.hasOwnProperty(k)) {
            params.push(e(k) + '=' + encodeURIComponent(data[k]));
          }
        }
        payload = params.join('&');
      }
      return payload;
    };
    core = {
      ajax: function(method, url, data, headers) {
        return new Promise(function(resolve, reject) {
          var client, content_type, h, payload;
          client = new XMLHttpRequest;
          data = data || {};
          headers = headers || {};
          payload = _encode(data);
          if (method === 'GET' && payload) {
            url += '?' + payload;
            payload = null;
          }
          client.open(method, url);
          content_type = 'application/x-www-form-urlencoded';
          for (h in headers) {
            if (headers.hasOwnProperty(h)) {
              if (h.toLowerCase() === 'content-type') {
                content_type = headers[h];
              } else {
                client.setRequestHeader(h, headers[h]);
              }
            }
          }
          client.setRequestHeader('Content-type', content_type);
          if (content_type === 'application/json') {
            payload = JSON.stringify(data);
          } else if (content_type === 'multipart/form-data') {
            payload = data;
          }
          client.send(payload);
          client.onload = function() {
            if (this.status >= 200 && this.status < 300) {
              resolve(this.response);
            } else {
              reject(this.statusText);
            }
          };
          client.onerror = function() {
            reject(this.statusText);
          };
        });
      }
    };
    return {
      'get': function(args, headers) {
        return core.ajax('GET', url, args, headers);
      },
      'post': function(args) {
        return core.ajax('POST', url, args, headers);
      },
      'put': function(args) {
        return core.ajax('PUT', url, args, headers);
      },
      'delete': function(args) {
        return core.ajax('DELETE', url, args, headers);
      }
    };
  };

  this.MojioClientLite = (function() {
    var ACCESSTOKENSTORAGE;

    MojioClientLite.extend = function(target) {
      var sources;
      sources = [].slice.call(arguments, 1);
      sources.forEach(function(source) {
        var prop;
        for (prop in source) {
          target[prop] = source[prop];
        }
      });
      return target;
    };

    ACCESSTOKENSTORAGE = 'ACCESSTOKEN';

    function MojioClientLite(conf) {
      this.mojio = bind(this.mojio, this);
      this.trip = bind(this.trip, this);
      this.group = bind(this.group, this);
      this.geofence = bind(this.geofence, this);
      this.user = bind(this.user, this);
      this.vehicle = bind(this.vehicle, this);
      this.app = bind(this.app, this);
      this.tags = bind(this.tags, this);
      this.image = bind(this.image, this);
      this.permissions = bind(this.permissions, this);
      this["delete"] = bind(this["delete"], this);
      this.post = bind(this.post, this);
      this.put = bind(this.put, this);
      this.get = bind(this.get, this);
      this.getPath = bind(this.getPath, this);
      this.query = bind(this.query, this);
      this.header = bind(this.header, this);
      this.token = bind(this.token, this);
      this.authorize = bind(this.authorize, this);
      var defConfig, env;
      defConfig = {
        environment: '',
        accountsURL: 'accounts.moj.io',
        apiURL: 'api.moj.io',
        pushURL: 'push.moj.io',
        redirect_uri: window.location.href.replace('http:', 'https:').split('#')[0],
        scope: 'admin',
        acceptLanguage: 'en',
        tokenRequester: function() {
          return document.location.hash.match(/access_token=([0-9a-f-]{36})/)[1];
        }
      };
      env = 'https://';
      this.config = this.constructor.extend({}, defConfig, conf);
      if (this.config.environment !== '') {
        env = env + this.config.environment + '-';
      }
      this.config.accountsURL = env + this.config.accountsURL;
      this.config.apiURL = env + this.config.apiURL;
      this.config.pushURL = env + this.config.pushURL;
    }

    MojioClientLite.prototype.authorize = function() {
      return window.location.href(this.config.accountsURL + '/OAuth2/authorize' + '?response_type=token&client_id=' + this.config.application + '&redirect_uri=' + this.config.redirect_uri + '&scope=' + this.config.scope);
    };

    MojioClientLite.prototype.token = function() {
      var access_token, e, found, param, temp;
      param = window.location.toString().split('#')[1];
      found = false;
      if (typeof param !== 'undefined' && param.indexOf('access_token=') !== -1) {
        try {
          access_token = this.config.tokenRequester();
          if (access_token) {
            this.config.access_token = access_token;
            sessionStorage.setItem(ACCESSTOKENSTORAGE, this.config.access_token);
            found = true;
          }
        } catch (_error) {
          e = _error;
          found = false;
        }
      } else {
        temp = sessionStorage[ACCESSTOKENSTORAGE];
        if ((temp != null) && temp !== null && temp.length !== 0) {
          this.config.access_token = temp;
          found = true;
        }
      }
      return found;
    };

    MojioClientLite.prototype.header = function() {
      return {
        'Accept': 'application/json',
        'Authorization': 'Bearer ' + this.config.access_token,
        'Accept-Language': this.config.acceptLanguage,
        'Content-Type': 'application/json'
      };
    };

    MojioClientLite.prototype.query = function() {
      var qc;
      qc = (function() {
        function qc() {
          this.prepare = bind(this.prepare, this);
          this.orderby = bind(this.orderby, this);
          this.select = bind(this.select, this);
          this.filter = bind(this.filter, this);
          this.skip = bind(this.skip, this);
          this.top = bind(this.top, this);
        }

        qc.prototype.data = {};

        qc.prototype.top = function($top) {
          this.data.$top = $top;
          return this;
        };

        qc.prototype.skip = function($skip) {
          this.data.$skip = $skip;
          return this;
        };

        qc.prototype.filter = function($filter) {
          this.data.$filter = $filter;
          return this;
        };

        qc.prototype.select = function($select) {
          this.data.$select = $select;
          return this;
        };

        qc.prototype.orderby = function($orderby) {
          this.data.$orderby = $orderby;
          return this;
        };

        qc.prototype.prepare = function() {
          return this.data;
        };

        return qc;

      })();
      return new qc();
    };

    MojioClientLite.prototype.getPath = function(path, data, header) {
      data = data || {};
      if (data.prepare != null) {
        data = data.prepare();
      }
      return new Promise(function(resolve, reject) {
        return $http(this.config.apiURL + path).get(data, this.constructor.extend({}, this.header(), header || {})).then(function(data) {
          return resolve(JSON.parse(data));
        }, function(data) {
          return reject(data);
        });
      });
    };

    MojioClientLite.prototype.get = function() {
      if (arguments.length === 0) {
        return {
          me: (function(_this) {
            return function(data, header) {
              return _this.getPath('/v2/me', data, header);
            };
          })(this),
          users: (function(_this) {
            return function(data, header) {
              return _this.getPath('/v2/users', data, header);
            };
          })(this),
          mojios: (function(_this) {
            return function(data, header) {
              return _this.getPath('/v2/mojios', data, header);
            };
          })(this),
          vehicles: (function(_this) {
            return function(data, header) {
              return _this.getPath('/v2/vehicles', data, header);
            };
          })(this),
          apps: (function(_this) {
            return function(data, header) {
              return _this.getPath('/v2/apps', data, header);
            };
          })(this),
          groups: (function(_this) {
            return function(data, header) {
              return _this.getPath('/v2/groups', data, header);
            };
          })(this),
          trips: (function(_this) {
            return function(data, header) {
              return _this.getPath('/v2/trips', data, header);
            };
          })(this),
          geofences: (function(_this) {
            return function(data, header) {
              return _this.getPath('/v2/geofences', data, header);
            };
          })(this),
          user: function(id) {
            return this.getPath('/v2/users/' + id);
          },
          mojio: (function(_this) {
            return function(id) {
              return _this.getPath('/v2/mojios/' + id);
            };
          })(this),
          vehicle: (function(_this) {
            return function(id) {
              return _this.getPath('/v2/vehicles/' + id);
            };
          })(this),
          app: (function(_this) {
            return function(id) {
              return _this.getPath('/v2/apps/' + id);
            };
          })(this),
          group: (function(_this) {
            return function(id) {
              return _this.getPath('/v2/groups/' + id);
            };
          })(this),
          trip: (function(_this) {
            return function(id) {
              return _this.getPath('/v2/trips/' + id);
            };
          })(this),
          geofence: (function(_this) {
            return function(id) {
              return _this.getPath('/v2/geofences/' + id);
            };
          })(this)
        };
      } else if (typeof arguments[0] === "string") {
        return this.getPath(arguments[0], arguments[1] || {});
      }
    };

    MojioClientLite.prototype.put = function(path, data) {
      return new Promise(function(resolve, reject) {
        return $http(this.config.apiURL + path).put(data || {}, this.constructor.extend({}, this.header(), header || {})).then(function(data) {
          return resolve(JSON.parse(data));
        }, function(data) {
          return reject(data);
        });
      });
    };

    MojioClientLite.prototype.post = function(path, data) {
      return new Promise(function(resolve, reject) {
        return $http(this.config.apiURL + path).post(data || {}, this.constructor.extend({}, this.header(), header || {})).then(function(data) {
          return resolve(JSON.parse(data));
        }, function(data) {
          return reject(data);
        });
      });
    };

    MojioClientLite.prototype["delete"] = function(path, data) {
      return new Promise(function(resolve, reject) {
        return $http(this.config.apiURL + path)["delete"](data || {}, this.constructor.extend({}, this.header(), header || {})).then(function(data) {
          return resolve(JSON.parse(data));
        }, function(data) {
          return reject(data);
        });
      });
    };

    MojioClientLite.prototype.permissions = function(path, oid) {
      return {
        get: (function(_this) {
          return function() {
            return _this.getPath(path + '/' + oid + '/permissions');
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"](path + '/' + oid + '/permissions');
          };
        })(this),
        put: (function(_this) {
          return function(data) {
            return _this.put(path + '/' + oid + '/permissions', data);
          };
        })(this),
        post: (function(_this) {
          return function(data) {
            return _this.post(path + '/' + oid + '/permissions', data);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.image = function(path, oid) {
      return {
        get: (function(_this) {
          return function() {
            return _this.getPath(path + '/' + oid + '/image');
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"](path + '/' + oid + '/image');
          };
        })(this),
        put: (function(_this) {
          return function(data) {
            return _this.put(path + '/' + oid + '/image', data, {
              'Content-Type': 'multipart/form-data'
            });
          };
        })(this),
        post: (function(_this) {
          return function(data) {
            return _this.post(path + '/' + oid + '/image', data, {
              'Content-Type': 'multipart/form-data'
            });
          };
        })(this)
      };
    };

    MojioClientLite.prototype.tags = function(path, oid) {
      return {
        "delete": (function(_this) {
          return function(tag) {
            return _this["delete"](path + '/' + oid + '/tags/' + tag);
          };
        })(this),
        post: (function(_this) {
          return function(tag) {
            return _this.post(path + '/' + oid + '/tags/' + tag);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.app = function(obj) {
      return {
        put: (function(_this) {
          return function() {
            return _this.put('/v2/apps/' + obj.Id, obj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post('/v2/apps', obj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"]('/v2/apps/' + obj.Id);
          };
        })(this),
        secret: (function(_this) {
          return function() {
            return {
              get: function() {
                return _this.getPath('/v2/apps/' + obj.Id + '/secret');
              },
              "delete": function() {
                return _this["delete"]('/v2/apps/' + obj.Id + '/secret');
              }
            };
          };
        })(this),
        image: (function(_this) {
          return function() {
            return _this.image('/v2/apps', obj.Id);
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return _this.getPath('/v2/apps/' + obj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions('/v2/apps', obj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags('/v2/apps', obj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.vehicle = function(obj) {
      return {
        put: (function(_this) {
          return function() {
            return _this.put('/v2/vehicles/' + obj.Id, obj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post('/v2/vehicles', obj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"]('/v2/vehicles/' + obj.Id);
          };
        })(this),
        address: (function(_this) {
          return function() {
            return _this.getPath('/v2/vehicles/' + obj.Id + '/address');
          };
        })(this),
        trips: (function(_this) {
          return function(data) {
            return _this.getPath('/v2/vehicles/' + obj.Id + '/trips', data);
          };
        })(this),
        vin: (function(_this) {
          return function() {
            return _this.getPath('/v2/vehicles/' + obj.Id + '/vin');
          };
        })(this),
        serviceschedule: (function(_this) {
          return function() {
            return _this.getPath('/v2/vehicles/' + obj.Id + '/serviceschedule');
          };
        })(this),
        serviceschedulenext: (function(_this) {
          return function() {
            return _this.getPath('/v2/vehicles/' + obj.Id + '/serviceschedulenext');
          };
        })(this),
        history: (function(_this) {
          return function() {
            return {
              states: function() {
                return _this.getPath('/v2/vehicles/' + obj.Id + '/history/states');
              },
              locations: function() {
                return _this.getPath('/v2/vehicles/' + obj.Id + '/history/locations');
              }
            };
          };
        })(this),
        image: (function(_this) {
          return function() {
            return _this.image('/v2/vehicles', obj.Id);
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return _this.getPath('/v2/vehicles/' + obj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions('/v2/vehicles', obj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags('/v2/vehicles', obj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.user = function(obj) {
      return {
        put: (function(_this) {
          return function() {
            return _this.put('/v2/users/' + obj.Id, obj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post('/v2/users', obj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"]('/v2/users/' + obj.Id);
          };
        })(this),
        vehicles: (function(_this) {
          return function() {
            return _this.getPath('/v2/users/' + obj.Id + '/vehicles');
          };
        })(this),
        mojios: (function(_this) {
          return function() {
            return _this.getPath('/v2/users/' + obj.Id + '/mojios');
          };
        })(this),
        trips: (function(_this) {
          return function() {
            return _this.getPath('/v2/users/' + obj.Id + '/trips');
          };
        })(this),
        groups: (function(_this) {
          return function() {
            return _this.getPath('/v2/users/' + obj.Id + '/groups');
          };
        })(this),
        image: (function(_this) {
          return function() {
            return _this.image('/v2/users', obj.Id);
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return _this.getPath('/v2/users/' + obj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions('/v2/users', obj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags(p, obj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.geofence = function(obj) {
      return {
        put: (function(_this) {
          return function() {
            return _this.put('/v2/geofences/' + obj.Id, obj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post('/v2/geofences', obj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"]('/v2/geofences/' + obj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.group = function(obj) {
      return {
        put: (function(_this) {
          return function() {
            return _this.put('/v2/groups/' + objId, obj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post('/v2/groups', obj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"]('/v2/groups/' + obj.Id);
          };
        })(this),
        users: (function(_this) {
          return function() {
            return {
              get: function() {
                return _this.getPath('/v2/groups/' + obj.Id + '/users');
              },
              "delete": function() {
                return _this["delete"]('/v2/groups/' + obj.Id + '/users');
              },
              put: function(data) {
                return _this.put('/v2/groups/' + obj.Id + '/users', data);
              },
              post: function(data) {
                return _this.post('/v2/groups/' + obj.Id + '/users', data);
              }
            };
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return _this.getPath('/v2/groups/' + obj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions('/v2/groups', obj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags(p, obj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.trip = function(obj) {
      return {
        put: (function(_this) {
          return function() {
            return _this.put('/v2/trips/' + obj.Id, obj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"]('/v2/trips/' + obj.Id);
          };
        })(this),
        history: (function(_this) {
          return function() {
            return {
              states: function() {
                return _this.getPath('/v2/trips/' + obj.Id + '/history/states');
              },
              locations: function() {
                return _this.getPath('/v2/trips/' + obj.Id + '/history/locations');
              }
            };
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return _this.getPath('/v2/trips/' + obj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions('/v2/trips', obj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags('/v2/trips', obj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.mojio = function(obj) {
      return {
        put: (function(_this) {
          return function() {
            return _this.put('/v2/mojios' + '/' + obj.Id, obj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post('/v2/mojios', obj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"]('/v2/mojios' + '/' + obj.Id);
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return _this.getPath('/v2/mojios' + '/' + obj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions('/v2/mojios', obj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags('/v2/mojios', obj.Id);
          };
        })(this)
      };
    };

    return MojioClientLite;

  })();

}).call(this);

//# sourceMappingURL=MojioClientLite.js.map
