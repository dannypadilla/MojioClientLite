// Generated by CoffeeScript 1.9.1
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.MojioClientLite = (function() {
    var ACCESSTOKENSTORAGE, _this;

    _this = MojioClientLite;

    MojioClientLite.extend = function(target) {
      var sources;
      sources = [].slice.call(arguments, 1);
      sources.forEach(function(source) {
        var prop;
        for (prop in source) {
          target[prop] = source[prop];
        }
      });
      return target;
    };

    ACCESSTOKENSTORAGE = 'ACCESSTOKEN';

    function MojioClientLite(conf) {
      this.mojio = bind(this.mojio, this);
      this.trip = bind(this.trip, this);
      this.group = bind(this.group, this);
      this.geofence = bind(this.geofence, this);
      this.user = bind(this.user, this);
      this.vehicle = bind(this.vehicle, this);
      this.app = bind(this.app, this);
      this.tags = bind(this.tags, this);
      this.image = bind(this.image, this);
      this.permissions = bind(this.permissions, this);
      this["delete"] = bind(this["delete"], this);
      this.post = bind(this.post, this);
      this.put = bind(this.put, this);
      this.get = bind(this.get, this);
      this.getPath = bind(this.getPath, this);
      this.getMethods = bind(this.getMethods, this);
      this.header = bind(this.header, this);
      this.token = bind(this.token, this);
      this.authorize = bind(this.authorize, this);
      var defConfig;
      defConfig = {
        environment: '',
        accountsURL: 'https://accounts.moj.io',
        apiURL: 'https://api.moj.io',
        pushURL: 'https://push.moj.io',
        redirect_uri: window.location.href.replace('http:', 'https:').split('#')[0],
        scope: 'admin',
        acceptLanguage: 'en'
      };
      this.config = this.constructor.extend({}, defConfig, conf);
      if (this.config.environment !== '') {
        this.config.accountsURL = this.config.environment + '-' + this.config.accountsURL;
        this.config.apiURL = this.config.environment + '-' + this.config.apiURL;
        this.config.pushURL = this.config.environment + '-' + this.config.pushURL;
      }
    }

    MojioClientLite.prototype.authorize = function() {
      var url;
      url = this.config.accountsURL + '/OAuth2/authorize' + '?response_type=token&client_id=' + this.config.application + '&redirect_uri=' + this.config.redirect_uri + '&scope=' + this.config.scope;
      return window.location.href = url;
    };

    MojioClientLite.prototype.token = function() {
      var access_token, e, found, param, temp;
      param = window.location.toString().split('#')[1];
      found = false;
      if (typeof param !== 'undefined' && param.indexOf('access_token=') !== -1) {
        try {
          access_token = document.location.hash.match(/access_token=([0-9a-f-]{36})/)[1];
          if (access_token) {
            this.config.access_token = access_token;
            sessionStorage.setItem(ACCESSTOKENSTORAGE, this.config.access_token);
            found = true;
          }
        } catch (_error) {
          e = _error;
          found = false;
        }
      } else {
        temp = sessionStorage[ACCESSTOKENSTORAGE];
        if ((temp != null) && temp !== null && temp.length !== 0) {
          this.config.access_token = temp;
          found = true;
        }
      }
      return found;
    };

    MojioClientLite.prototype.header = function() {
      return {
        'Accept': 'application/json',
        'Authorization': 'Bearer ' + this.config.access_token,
        'Accept-Language': this.config.acceptLanguage,
        'Content-Type': 'application/json'
      };
    };

    MojioClientLite.prototype.getMethods = function() {
      var g;
      g = this.getPath;
      return {
        me: (function(_this) {
          return function(data, header) {
            return g('/v2/me', data, header);
          };
        })(this),
        users: (function(_this) {
          return function(data, header) {
            return g('/v2/users', data, header);
          };
        })(this),
        mojios: (function(_this) {
          return function(data, header) {
            return g('/v2/mojios', data, header);
          };
        })(this),
        vehicles: (function(_this) {
          return function(data, header) {
            return g('/v2/vehicles', data, header);
          };
        })(this),
        apps: (function(_this) {
          return function(data, header) {
            return g('/v2/apps', data, header);
          };
        })(this),
        groups: (function(_this) {
          return function(data, header) {
            return g('/v2/groups', data, header);
          };
        })(this),
        trips: (function(_this) {
          return function(data, header) {
            return g('/v2/trips', data, header);
          };
        })(this),
        geofences: (function(_this) {
          return function(data, header) {
            return g('/v2/geofences', data, header);
          };
        })(this),
        user: function(id) {
          return g('/v2/users/' + id);
        },
        mojio: (function(_this) {
          return function(id) {
            return g('/v2/mojios/' + id);
          };
        })(this),
        vehicle: (function(_this) {
          return function(id) {
            return g('/v2/vehicles/' + id);
          };
        })(this),
        app: (function(_this) {
          return function(id) {
            return g('/v2/apps/' + id);
          };
        })(this),
        group: (function(_this) {
          return function(id) {
            return g('/v2/groups/' + id);
          };
        })(this),
        trip: (function(_this) {
          return function(id) {
            return g('/v2/trips/' + id);
          };
        })(this),
        geofence: (function(_this) {
          return function(data, header) {
            return g('/v2/geofences/' + id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.getPath = function(path, data) {
      var header, p, url;
      url = this.config.apiURL + path;
      if (data == null) {
        data = {};
      }
      header = this.header();
      p = new promise.Promise();
      promise.get(url, data, header).then(function(error, text, xhr) {
        if (error) {
          p.done(xhr.status, null);
        }
        return p.done(null, JSON.parse(text));
      });
      return p;
    };

    MojioClientLite.prototype.get = function() {
      var data, path;
      if (arguments.length === 0) {
        return this.getMethods();
      } else if (typeof arguments[0] === "string") {
        path = arguments[0];
        data = {};
        if (arguments.length >= 1) {
          data = arguments[1];
        }
        return this.getPath(arguments[0], data);
      }
    };

    MojioClientLite.prototype.put = function(path, data) {
      var header, p, url;
      url = this.config.apiURL + path;
      if (data == null) {
        data = {};
      }
      header = this.header();
      p = new promise.Promise();
      promise.put(url, data, header).then(function(error, text, xhr) {
        if (error) {
          p.done(xhr.status, null);
        }
        return p.done(null, JSON.parse(text));
      });
      return p;
    };

    MojioClientLite.prototype.post = function(path, data) {
      var header, p, url;
      url = this.config.apiURL + path;
      if (data == null) {
        data = {};
      }
      header = this.header();
      p = new promise.Promise();
      promise.put(url, data, header).then(function(error, text, xhr) {
        if (error) {
          p.done(xhr.status, null);
        }
        return p.done(null, JSON.parse(text));
      });
      return p;
    };

    MojioClientLite.prototype["delete"] = function(path) {
      var header, p, url;
      url = this.config.apiURL + path;
      header = this.header();
      p = new promise.Promise();
      promise["delete"](url).then(function(error, text, xhr) {
        if (error) {
          p.done(xhr.status, null);
        }
        return p.done(null, JSON.parse(text));
      });
      return p;
    };

    MojioClientLite.prototype.permissions = function(path, oid) {
      return {
        get: (function(_this) {
          return function() {
            return _this.getPath(path + '/' + oid + '/permissions');
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"](path + '/' + oid + '/permissions');
          };
        })(this),
        put: (function(_this) {
          return function(data) {
            return _this.put(path + '/' + oid + '/permissions', data);
          };
        })(this),
        post: (function(_this) {
          return function(data) {
            return _this.post(path + '/' + oid + '/permissions', data);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.image = function(path, oid) {
      return {
        get: (function(_this) {
          return function() {
            return _this.getPath(path + '/' + oid + '/image');
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"](path + '/' + oid + '/image');
          };
        })(this),
        put: (function(_this) {
          return function(data) {
            return _this.put(path + '/' + oid + '/image', data, {
              'Content-Type': 'multipart/form-data'
            });
          };
        })(this),
        post: (function(_this) {
          return function(data) {
            return _this.post(path + '/' + oid + '/image', data, {
              'Content-Type': 'multipart/form-data'
            });
          };
        })(this)
      };
    };

    MojioClientLite.prototype.tags = function(path, oid) {
      return {
        "delete": (function(_this) {
          return function(tag) {
            return _this["delete"](path + '/' + oid + '/tags/' + tag);
          };
        })(this),
        post: (function(_this) {
          return function(tag) {
            return _this.post(path + '/' + oid + '/tags/' + tag);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.app = function(appObj) {
      var g, p;
      g = this.getPath;
      p = '/v2/apps';
      return {
        put: (function(_this) {
          return function() {
            return _this.put(p + '/' + appObj.Id, appObj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post(p, appObj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"](p + '/' + appObj.Id);
          };
        })(this),
        secret: (function(_this) {
          return function() {
            return {
              get: function() {
                return g(p + '/' + appObj.Id + '/secret');
              },
              "delete": function() {
                return _this["delete"](p + '/' + appObj.Id + '/secret');
              }
            };
          };
        })(this),
        image: (function(_this) {
          return function() {
            return _this.image(p, appObj.Id);
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return g(p + '/' + appObj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions(p, appObj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags(p, appObj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.vehicle = function(vehObj) {
      var g, p;
      g = this.getPath;
      p = '/v2/vehicles';
      return {
        put: (function(_this) {
          return function() {
            return _this.put(p + '/' + vehObj.Id, vehObj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post(p, vehObj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"](p + '/' + vehObj.Id);
          };
        })(this),
        address: (function(_this) {
          return function() {
            return g(p + '/' + vehObj.Id + '/address');
          };
        })(this),
        trips: (function(_this) {
          return function(data) {
            return g(p + '/' + vehObj.Id + '/trips', data);
          };
        })(this),
        vin: (function(_this) {
          return function() {
            return g(p + '/' + vehObj.Id + '/vin');
          };
        })(this),
        serviceschedule: (function(_this) {
          return function() {
            return g(p + '/' + vehObj.Id + '/serviceschedule');
          };
        })(this),
        serviceschedulenext: (function(_this) {
          return function() {
            return g(p + '/' + vehObj.Id + '/serviceschedulenext');
          };
        })(this),
        history: (function(_this) {
          return function() {
            return {
              states: function() {
                return g(p + '/' + vehObj.Id + '/history/states');
              },
              locations: function() {
                return g(p + '/' + vehObj.Id + '/history/locations');
              }
            };
          };
        })(this),
        image: (function(_this) {
          return function() {
            return _this.image(p, vehObj.Id);
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return g(p + '/' + vehObj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions(p, vehObj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags(p, vehObj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.user = function(userObj) {
      var g, p;
      g = this.getPath;
      p = '/v2/users';
      return {
        put: (function(_this) {
          return function() {
            return _this.put(p + '/' + userObj.Id, userObj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post(p, userObj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"](p + '/' + userObj.Id);
          };
        })(this),
        vehicles: (function(_this) {
          return function() {
            return g(p + '/' + userObj.Id + '/vehicles');
          };
        })(this),
        mojios: (function(_this) {
          return function() {
            return g(p + '/' + userObj.Id + '/mojios');
          };
        })(this),
        trips: (function(_this) {
          return function() {
            return g(p + '/' + userObj.Id + '/trips');
          };
        })(this),
        groups: (function(_this) {
          return function() {
            return g(p + '/' + userObj.Id + '/groups');
          };
        })(this),
        image: (function(_this) {
          return function() {
            return _this.image(p, userObj.Id);
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return g(p + '/' + userObj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions(p, userObj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags(p, userObj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.geofence = function(gfObj) {
      var g, p;
      g = this.getPath;
      p = '/v2/geofences';
      return {
        put: (function(_this) {
          return function() {
            return _this.put(p + '/' + gfObj.Id, gfObj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post(p, gfObj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"](p + '/' + gfObj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.group = function(grpObj) {
      var g, p;
      g = this.getPath;
      p = '/v2/groups';
      return {
        put: (function(_this) {
          return function() {
            return _this.put(p + '/' + grpObj.Id, grpObj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post(p, grpObj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"](p + '/' + grpObj.Id);
          };
        })(this),
        users: (function(_this) {
          return function() {
            return {
              get: function() {
                return g(p + '/' + grpObj.Id + '/users');
              },
              "delete": function() {
                return _this["delete"](p + '/' + grpObj.Id + '/users');
              },
              put: function(data) {
                return _this.put(p + '/' + grpObj.Id + '/users', data);
              },
              post: function(data) {
                return _this.post(p + '/' + grpObj.Id + '/users', data);
              }
            };
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return g(p + '/' + grpObj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions(p, grpObj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags(p, grpObj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.trip = function(tripObj) {
      var g, p;
      g = this.getPath;
      p = '/v2/trips';
      return {
        put: (function(_this) {
          return function() {
            return _this.put(p + '/' + tripObj.Id, tripObj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"](p + '/' + tripObj.Id);
          };
        })(this),
        history: (function(_this) {
          return function() {
            return {
              states: function() {
                return g(p + '/' + tripObj.Id + '/history/states');
              },
              locations: function() {
                return g(p + '/' + tripObj.Id + '/history/locations');
              }
            };
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return g(p + '/' + tripObj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions(p, tripObj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags(p, tripObj.Id);
          };
        })(this)
      };
    };

    MojioClientLite.prototype.mojio = function(mojioObj) {
      var g, p;
      g = this.getPath;
      p = '/v2/mojios';
      return {
        put: (function(_this) {
          return function() {
            return _this.put(p + '/' + mojioObj.Id, grpObj);
          };
        })(this),
        post: (function(_this) {
          return function() {
            return _this.post(p, mojioObj);
          };
        })(this),
        "delete": (function(_this) {
          return function() {
            return _this["delete"](p + '/' + mojioObj.Id);
          };
        })(this),
        permission: (function(_this) {
          return function() {
            return g(p + '/' + mojioObj.Id + '/permission');
          };
        })(this),
        permissions: (function(_this) {
          return function() {
            return _this.permissions(p, mojioObj.Id);
          };
        })(this),
        tags: (function(_this) {
          return function() {
            return _this.tags(p, mojioObj.Id);
          };
        })(this)
      };
    };

    return MojioClientLite;

  })();

}).call(this);

//# sourceMappingURL=MojioClientLite.js.map
